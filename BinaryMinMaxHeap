public class DataNode : IComparable<DataNode>
{
	public int Key
	{
		get;
		set;
	}

	public int CompareTo(DataNode other)
	{
		// If other is not a valid object reference, this instance is greater.
		if (other == null)
			return 1;
		
		return this.Key.CompareTo(other.Key);
	}
}

public class Heap<T>
	where T : IComparable<T>
{
	public enum HeapType
	{
		MinHeap,
		MaxHeap
	}

	;
	private HeapType heapType;
	private List<T> m_content;
	public Heap(HeapType type)
	{
		heapType = type;
		m_content = new List<T>();
	}

	public bool IsEmpty()
	{
		return m_content.Count == 0;
	}

	public int Count
	{
		get
		{
			return GetCount();
		}
	}

	private int GetCount()
	{
		return m_content.Count;
	}

	public HeapType Type
	{
		get
		{
			return heapType;
		}
	}

	public T GetBest()
	{
		if (IsEmpty())
			throw new System.InvalidOperationException("Heap is empty.");
		return (T)m_content[0];
	}

	public T ExtractBest()
	{
		T result = GetBest();
		DeleteBest();
		return result;
	}

	public void DeleteBest()
	{
		if (IsEmpty())
			throw new System.InvalidOperationException("Heap is empty.");
		SwitchItems(0, GetCount() - 1);
		m_content.RemoveAt(GetCount() - 1);
		if (!IsEmpty())
			BubbleDown(0);
	}

	public virtual int Add(T item)
	{
		m_content.Add(item);
		return BubbleUp(m_content.Count - 1);
	}

	protected bool IsFirstBigger(int first, int second)
	{
		return (((IComparable<T>)m_content[first]).CompareTo(((T)m_content[second])) > 0);
	}

	protected int GetParentIndex(int index)
	{
		if (index < 0 || index > GetCount() - 1)
			throw new System.InvalidOperationException("Invalid index.");
		int result = (int)Math.Floor(((double)index - 1) / 2);
		return result;
	}

	protected int GetLeftChildIndex(int index)
	{
		if (index < 0 || index > GetCount() - 1)
			throw new System.InvalidOperationException("Invalid index.");
		int result = (2 * index) + 1;
		if (result > GetCount() - 1)
			result = index; // return itself if no children
		return result;
	}

	protected int GetRightChildIndex(int index)
	{
		if (index < 0 || index > GetCount() - 1)
			throw new System.InvalidOperationException("Invalid index.");
		int result = (2 * index) + 2;
		if (result > GetCount() - 1)
			result = index; // return itself if no children
		return result;
	}

	private int BubbleUp(int index)
	{
		if (index == 0)
			return 0;
		int parent = GetParentIndex(index);
		// while parent is smaller and item not on root already
		while ((heapType == HeapType.MinHeap && index != 0 && IsFirstBigger(parent, index)) || (heapType == HeapType.MaxHeap && index != 0 && IsFirstBigger(index, parent)))
		{
			SwitchItems(index, parent);
			index = parent;
			parent = GetParentIndex(parent);
		}

		return index;
	}

	private int BubbleDown(int index)
	{
		int leftChild, rightChild, targetChild;
		bool finished = false;
		do
		{
			leftChild = GetLeftChildIndex(index);
			rightChild = GetRightChildIndex(index);
			// if left child is bigger then right child
			if (leftChild == index && rightChild == index) // when no children, get child will return element itself
			{
				finished = true; // bubbled down to the end
			}
			else // bubble further
			{
				if ((heapType == HeapType.MinHeap && IsFirstBigger(leftChild, rightChild)) || (heapType == HeapType.MaxHeap && IsFirstBigger(rightChild, leftChild)))
					targetChild = rightChild;
				else
					targetChild = leftChild;
				// if smaller item at index is bigger than smaller child
				if ((heapType == HeapType.MinHeap && IsFirstBigger(index, targetChild)) || (heapType == HeapType.MaxHeap && IsFirstBigger(targetChild, index)))
				{
					SwitchItems(targetChild, index);
					index = targetChild;
				}
				else
					finished = true;
			}
		}
		while (!finished);
		return index;
	}

	private void SwitchItems(int index1, int index2)
	{
		T temp = (T)m_content[index1];
		m_content[index1] = m_content[index2];
		m_content[index2] = temp;
	}
}

public class MinHeap<T> : Heap<T> where T : IComparable<T>
{
	public MinHeap(): base(HeapType.MinHeap)
	{
	}

	public T GetMin()
	{
		return base.GetBest();
	}

	public T ExtractMin()
	{
		return base.ExtractBest();
	}

	public void DeleteMin()
	{
		base.DeleteBest();
	}
}

public class MaxHeap<T> : Heap<T> where T : IComparable<T>
{
	public MaxHeap(): base(HeapType.MaxHeap)
	{
	}

	public T GetMax()
	{
		return base.GetBest();
	}

	public T ExtractMax()
	{
		return base.ExtractBest();
	}

	public void DeleteMax()
	{
		base.DeleteBest();
	}
}
